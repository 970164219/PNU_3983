0
00:00:00,0 --> 00:00:05,0
https://git.ir/

1
00:00:03.080 --> 00:00:06.010
- So I can see it's more flexible if you're doing it

2
00:00:06.010 --> 00:00:10.030
with the agile way, will it cost more though, in the end

3
00:00:10.030 --> 00:00:12.030
if you go agile rather than waterfall?

4
00:00:12.030 --> 00:00:15.030
Because you've got the extra responsiveness,

5
00:00:15.030 --> 00:00:17.070
does that come with a price financially, overall,

6
00:00:17.070 --> 00:00:21.090
if you looked at the same product made by both methods?

7
00:00:21.090 --> 00:00:25.020
- Well, I mean it's kind of,

8
00:00:25.020 --> 00:00:27.030
and this is going to sound unsatisfying,

9
00:00:27.030 --> 00:00:29.050
but it kind of depends, you know?

10
00:00:29.050 --> 00:00:33.050
I mean if you have a customer that knows what they want

11
00:00:33.050 --> 00:00:35.060
and they're not going to make any changes

12
00:00:35.060 --> 00:00:37.080
then you could run that as an agile team.

13
00:00:37.080 --> 00:00:40.040
It should cost roughly the same

14
00:00:40.040 --> 00:00:42.050
because, you know, they'll be delivering in sprints

15
00:00:42.050 --> 00:00:43.050
and they'll just be,

16
00:00:43.050 --> 00:00:45.090
they won't have to deal with a lot of feedback.

17
00:00:45.090 --> 00:00:46.080
- They're doing the same amount of work.

18
00:00:46.080 --> 00:00:47.090
- Exactly, yeah.

19
00:00:47.090 --> 00:00:49.010
And they won't be dealing with a lot of feedback,

20
00:00:49.010 --> 00:00:50.060
they could probably get rid of the sprint reviews

21
00:00:50.060 --> 00:00:53.050
and just sort of focus on the work.

22
00:00:53.050 --> 00:00:58.070
But if you're, so that would be the same

23
00:00:58.070 --> 00:01:01.070
as if you ran a traditional waterfall project.

24
00:01:01.070 --> 00:01:06.060
But clearly the cost element here is the feedback.

25
00:01:06.060 --> 00:01:09.020
- Yeah, but that might be a price worth paying.

26
00:01:09.020 --> 00:01:11.050
to get a really great outcome.

27
00:01:11.050 --> 00:01:13.050
- Yeah, so if you have zero feedback

28
00:01:13.050 --> 00:01:17.090
from both a waterfall project and an agile product delivery

29
00:01:17.090 --> 00:01:20.070
then it should cost roughly the same,

30
00:01:20.070 --> 00:01:22.010
but it shouldn't cost more.

31
00:01:22.010 --> 00:01:25.010
- ALthough it might take longer if you're doing it agile

32
00:01:25.010 --> 00:01:28.020
because you might not do things in the optimum sequence.

33
00:01:28.020 --> 00:01:31.090
So if you knew everything you were going to do,

34
00:01:31.090 --> 00:01:32.090
and you planned it out.

35
00:01:32.090 --> 00:01:34.010
Because one of the things I find weird about agile,

36
00:01:34.010 --> 00:01:37.010
is that it doesn't have any concept

37
00:01:37.010 --> 00:01:38.050
of critical paths, does it?

38
00:01:38.050 --> 00:01:40.080
It doesn't really have a concept of dependencies.

39
00:01:40.080 --> 00:01:43.010
I mean, obviously, we know we can't do the roof

40
00:01:43.010 --> 00:01:46.000
until we have done the walls, so that's the dependency.

41
00:01:46.000 --> 00:01:50.050
But they don't plan out all the dependencies and therefor,

42
00:01:50.050 --> 00:01:51.080
because one of the objectives

43
00:01:51.080 --> 00:01:53.020
of conventional project managing

44
00:01:53.020 --> 00:01:55.080
is to do everything within the critical path time

45
00:01:55.080 --> 00:01:57.030
because you've got all the floating tasks

46
00:01:57.030 --> 00:01:58.060
fitting in around it.

47
00:01:58.060 --> 00:02:00.080
And you can't do it quicker than the critical path.

48
00:02:00.080 --> 00:02:03.050
And agile says, well we're not interested in any of that.

49
00:02:03.050 --> 00:02:07.090
And so, am I right in thinking that if you want to get it,

50
00:02:07.090 --> 00:02:09.080
if you know what you want

51
00:02:09.080 --> 00:02:12.060
and there aren't too many variations,

52
00:02:12.060 --> 00:02:17.070
waterfall will deliver it sooner, is that true?

53
00:02:17.070 --> 00:02:22.010
- Well, I don't know that it would deliver it sooner

54
00:02:22.010 --> 00:02:27.010
because like I said, if you know what you want

55
00:02:27.010 --> 00:02:29.000
and you can give it to either team

56
00:02:29.000 --> 00:02:30.040
and you don't need feedback

57
00:02:30.040 --> 00:02:32.010
and you're not going to make changes

58
00:02:32.010 --> 00:02:35.010
then the team should just be able to deliver the work.

59
00:02:35.010 --> 00:02:37.080
- Yeah, but in the right order is the question.

60
00:02:37.080 --> 00:02:40.000
That's why I was saying sooner rather than quicker.

61
00:02:40.000 --> 00:02:41.040
Because it's the same amount of work

62
00:02:41.040 --> 00:02:44.020
but if you do it in the wrong order,

63
00:02:44.020 --> 00:02:45.050
which you easily could with agile.

64
00:02:45.050 --> 00:02:47.050
I think agile assumes it doesn't really matter,

65
00:02:47.050 --> 00:02:48.030
or at least you do them

66
00:02:48.030 --> 00:02:50.040
in the order of value to the customer.

67
00:02:50.040 --> 00:02:52.090
And I totally get that and I didn't know that

68
00:02:52.090 --> 00:02:56.060
until this conversation, but that could take longer.

69
00:02:56.060 --> 00:03:00.050
- Yeah, and dependencies with agile is tricky

70
00:03:00.050 --> 00:03:03.040
because you are trying to get work

71
00:03:03.040 --> 00:03:06.060
as small as you can possibly be, sort of fit into a sprint.

72
00:03:06.060 --> 00:03:10.060
So typically, teams will use something called user stories

73
00:03:10.060 --> 00:03:13.080
which are supposed to be independent.

74
00:03:13.080 --> 00:03:16.000
And then you kind of manage the independencies

75
00:03:16.000 --> 00:03:17.090
within the team through conversations

76
00:03:17.090 --> 00:03:20.010
and individuals and interactions.

77
00:03:20.010 --> 00:03:23.010
- Maybe with software, there are less dependencies.

78
00:03:23.010 --> 00:03:26.050
Maybe you can do it in any order.

79
00:03:26.050 --> 00:03:28.070
You know, whereas with construction and manufacturing,

80
00:03:28.070 --> 00:03:31.000
you have to do things in a certain order.

81
00:03:31.000 --> 00:03:33.030
But maybe in software there's a lot more flexibility

82
00:03:33.030 --> 00:03:35.040
about the order you do things so it doesn't matter so much.

83
00:03:35.040 --> 00:03:37.050
Although, I don't know that much about software

84
00:03:37.050 --> 00:03:40.060
but I get the feeling some things sort of architecture,

85
00:03:40.060 --> 00:03:44.050
whatever that is, that has to be done first.

86
00:03:44.050 --> 00:03:46.070
But maybe agile people know that

87
00:03:46.070 --> 00:03:49.040
and then on top of that things can be done in any order.

88
00:03:49.040 --> 00:03:51.020
Maybe all the features can be done independently.

89
00:03:51.020 --> 00:03:54.020
- No, dependencies are a huge issue like in agile

90
00:03:54.020 --> 00:03:57.020
because, typically, what you have to do is that

91
00:03:57.020 --> 00:03:59.040
you won't necessarily have to deal with dependencies

92
00:03:59.040 --> 00:04:01.060
such as like create the hull of a ship before the top

93
00:04:01.060 --> 00:04:02.080
but you'll deal with dependencies

94
00:04:02.080 --> 00:04:05.030
in terms of the organizational structure.

95
00:04:05.030 --> 00:04:07.000
So you'll have like a data team

96
00:04:07.000 --> 00:04:08.080
and they'll need to sort of create things

97
00:04:08.080 --> 00:04:11.090
in their data cluster for the software team

98
00:04:11.090 --> 00:04:13.090
to be able to do their work.

99
00:04:13.090 --> 00:04:16.030
And then some organizations are silo

100
00:04:16.030 --> 00:04:18.070
to the point where you have QA teams and things like that.

101
00:04:18.070 --> 00:04:22.000
And sometimes if you're working a traditional project,

102
00:04:22.000 --> 00:04:24.020
you'll have a lot of dependencies in software.

103
00:04:24.020 --> 00:04:28.050
The way that agile, or typically Scrum teams deal with that,

104
00:04:28.050 --> 00:04:32.050
is that they have what's called cross-functional teams

105
00:04:32.050 --> 00:04:34.030
that deliver on each sprint.

106
00:04:34.030 --> 00:04:40.010
So each person will have, they'll be a generalized expert.

107
00:04:40.010 --> 00:04:42.080
So they will know a little bit about everything.

108
00:04:42.080 --> 00:04:44.040
You can do a little bit of database work,

109
00:04:44.040 --> 00:04:47.040
a little but of UX/UI work all within the sprint.

110
00:04:47.040 --> 00:04:48.070
And if you think about it, that's the way

111
00:04:48.070 --> 00:04:51.040
that you have to do it if you want to deliver iteratively.

112
00:04:51.040 --> 00:04:52.090
You know, and incrementally.

113
00:04:52.090 --> 00:04:58.020
If you're going to build out a complete product every two weeks

114
00:04:58.020 --> 00:05:00.060
or potentially shippable product every two weeks,

115
00:05:00.060 --> 00:05:01.090
then you have to have everybody on the team

116
00:05:01.090 --> 00:05:04.010
that knows how to do a bit of everything.

117
00:05:04.010 --> 00:05:05.050
So that you can deliver something.

118
00:05:05.050 --> 00:05:09.000
You don't want to say, okay well we're 90 percent finished

119
00:05:09.000 --> 00:05:11.000
with our increment this week,

120
00:05:11.000 --> 00:05:13.020
but we really need that UX/UI person to come through

121
00:05:13.020 --> 00:05:15.010
and fix things up so it looks nice.

122
00:05:15.010 --> 00:05:16.040
- As far as the waterfall,

123
00:05:16.040 --> 00:05:17.080
you can have specialists, can't you?

124
00:05:17.080 --> 00:05:19.010
'Cause you break it all down to bits

125
00:05:19.010 --> 00:05:21.020
and each person does their bit and it all comes together

126
00:05:21.020 --> 00:05:23.050
at the right time, in theory.

127
00:05:23.050 --> 00:05:25.070
So yeah, that's interesting.

128
00:05:25.070 --> 00:05:27.040
So you have to have people who can do a bit of everything.

129
00:05:27.040 --> 00:05:29.030
Although, they're useful if you can get 'em.

130
00:05:29.030 --> 00:05:31.090
- And they're very, it's difficult.

131
00:05:31.090 --> 00:05:34.010
That's one of the most difficult challenges with agile,

132
00:05:34.010 --> 00:05:37.000
is that because organizations are not set up that way.

